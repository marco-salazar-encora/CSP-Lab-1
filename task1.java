public class Main {
    public static void main(String[] args) {
        // Define an array of numbers
        int[] numbers = {1, 2, 3, 4, 5};
        // Iterate over the array and print each number
        for (int i = 0; i < numbers.length; i++) {
            System.out.println(numbers[i]);
        }
    }
    
    // Define a method that takes an array of numbers and returns the sum of all numbers
    public static int sum(int[] numbers) {
        int sum = 0;
        for (int i = 0; i < numbers.length; i++) {
            sum += numbers[i];
        }
        return sum;
    }

    // Given an array of integers, define 3 functions: 
    // one that calculates the maximum value in the array, 
    // another that calculates the minimum value,  
    // and a third that has two inputs, one an array of integers and the other input is the operation. 
    // This third method will call one of the first two methods based on the operation input. 
    private static int max(int[] numbers) {
        int max = numbers[0];
        for (int i = 1; i < numbers.length; i++) {
            if (numbers[i] > max) {
                max = numbers[i];
            }
        }
        return max;
    }

    private static int min(int[] numbers) {
        int min = numbers[0];
        for (int i = 1; i < numbers.length; i++) {
            if (numbers[i] < min) {
                min = numbers[i];
            }
        }
        return min;
    }

    public static int calculate(int[] numbers, String operation) {
        if (operation.equals("max")) {
            return max(numbers);
        } else if (operation.equals("min")) {
            return min(numbers);
        } else {
            return 0;
        }
    }


    /// Define a function that is able to sort an array of integers in ascending or descending order.
    public static void sort(int[] numbers, String order) {
        if (order.equals("asc")) {
            for (int i = 0; i < numbers.length; i++) {
                for (int j = i + 1; j < numbers.length; j++) {
                    if (numbers[i] > numbers[j]) {
                        int temp = numbers[i];
                        numbers[i] = numbers[j];
                        numbers[j] = temp;
                    }
                }
            }
        } else if (order.equals("desc")) {
            for (int i = 0; i < numbers.length; i++) {
                for (int j = i + 1; j < numbers.length; j++) {
                    if (numbers[i] < numbers[j]) {
                        int temp = numbers[i];
                        numbers[i] = numbers[j];
                        numbers[j] = temp;
                    }
                }
            }
        }
    }


    // Define a funtion that generates a new array with squared values of the original numbers
    // Inputs: an array of integers
    // Output: array with squared values of the original numbers
    // Example: input: [1, 2, 3], output: [1, 4, 9]
    public static int[] square(int[] numbers) {
        int[] squared = new int[numbers.length];
        for (int i = 0; i < numbers.length; i++) {
            squared[i] = numbers[i] * numbers[i];
        }
        return squared;
    }
    
    // Defina a function that filters the array to only include even or odd numbers.
    // Inputs: an array of integers and a string "even" or "odd"
    // Output: an array of integers with only even or odd numbers
    // Example: input: [1, 2, 3, 4, 5], "even", output: [2, 4]
    // Don't create a count variable, if the number is even or odd, add it to the new array
    public static int[] filter(int[] numbers, String type) {
       // This code was generated by copilot, but it is not the best solution. It was reported
        // int count = 0;
        // for (int i = 0; i < numbers.length; i++) {
        //     if (type.equals("even") && numbers[i] % 2 == 0) {
        //         count++;
        //     } else if (type.equals("odd") && numbers[i] % 2 != 0) {
        //         count++;
        //     }
        // }
        int[] filtered = new int[count];
        int index = 0;
        for (int i = 0; i < numbers.length; i++) {
            if (type.equals("even") && numbers[i] % 2 == 0) {
                filtered[index] = numbers[i];
                index++;
            } else if (type.equals("odd") && numbers[i] % 2 != 0) {
                filtered[index] = numbers[i];
                index++;
            }
        }
        return filtered;
    }

}